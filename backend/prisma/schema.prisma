// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  role          String   // e.g., 'admin', 'restorer', 'viewer'
  password      String?  // Hashed password for email/password auth
  jobTitle      String?
  timezone      String?
  language      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  workflows     Workflow[]
  auditLogs     AuditLog[]
  subscription  Subscription?
  webhooks      Webhook[]
  hubspotPortalId String? @unique
  overages      Overage[]
  notificationSettings NotificationSettings?
  apiKeys       ApiKey[]
  hubspotAccessToken   String?
  hubspotRefreshToken  String?
  hubspotTokenExpiresAt DateTime?
  resetToken    String?
  resetTokenExpires DateTime?
}

model Workflow {
  id            String            @id @default(uuid())
  hubspotId     String            @unique // HubSpot workflow ID
  name          String
  ownerId       String
  owner         User              @relation(fields: [ownerId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  versions      WorkflowVersion[]
}

model WorkflowVersion {
  id            String    @id @default(uuid())
  workflowId    String
  workflow      Workflow  @relation(fields: [workflowId], references: [id])
  versionNumber Int
  snapshotType  String    // e.g., 'manual', 'on-publish', 'daily-backup'
  createdBy     String    // User ID or 'system'
  createdAt     DateTime  @default(now())
  data          Json      // Raw workflow JSON from HubSpot

  @@unique([workflowId, versionNumber])
}

model AuditLog {
  id            String   @id @default(uuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  action        String   // e.g., 'restore', 'create', 'update', 'delete'
  entityType    String   // e.g., 'workflow', 'version', 'settings'
  entityId      String   // ID of the affected entity
  oldValue      Json?
  newValue      Json?
  timestamp     DateTime @default(now())
  ipAddress     String?
}

model Subscription {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  planId          String   // 'starter', 'professional', 'enterprise'
  status          String   // 'active', 'trial', 'cancelled', 'overdue'
  trialEndDate    DateTime?
  nextBillingDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Webhook {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String?
  endpointUrl String
  secret      String?
  events      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id           String   @id // 'starter', 'professional', 'enterprise'
  name         String
  maxWorkflows Int?     // null = unlimited
  historyDays  Int?     // null = unlimited
  features     String[] // List of feature keys
}

model Overage {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // e.g., 'workflow'
  amount      Int      // number of overages
  periodStart DateTime // start of billing period
  periodEnd   DateTime // end of billing period
  billed      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([userId, type, periodStart, periodEnd])
}

model NotificationSettings {
  id                        String   @id @default(uuid())
  userId                    String   @unique
  user                      User     @relation(fields: [userId], references: [id])
  notificationsEnabled      Boolean  @default(true)
  notificationEmail         String
  workflowDeleted           Boolean  @default(true)
  enrollmentTriggerModified Boolean  @default(false)
  workflowRolledBack        Boolean  @default(true)
  criticalActionModified    Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model ApiKey {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  description String
  keyHash     String   // Store only the hash of the API key
  createdAt   DateTime @default(now())
  lastUsed    DateTime?
  revoked     Boolean  @default(false)
}

model SsoConfig {
  id        String   @id @default(uuid())
  provider  String
  metadata  String
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
