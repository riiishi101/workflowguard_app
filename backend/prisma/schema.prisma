generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                @id @default(uuid())
  email                 String                @unique
  name                  String?
  role                  String
  password              String?
  jobTitle              String?
  timezone              String?
  language              String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  firstInstalledAt      DateTime?
  lastActiveAt          DateTime?
  hubspotPortalId       String?               @unique
  hubspotAccessToken    String?
  hubspotRefreshToken   String?
  hubspotTokenExpiresAt DateTime?
  resetToken            String?
  resetTokenExpires     DateTime?
  planId                String?               @default("professional")
  trialStartDate        DateTime?
  trialEndDate          DateTime?
  isTrialActive         Boolean?              @default(true)
  trialPlanId           String?
  apiKeys               ApiKey[]
  auditLogs             AuditLog[]
  notificationSettings  NotificationSettings?
  overages              Overage[]
  subscription          Subscription?
  webhooks              Webhook[]
  workflows             Workflow[]
  monitoredWorkflows    MonitoredWorkflow[]
}

model Workflow {
  id        String            @id @default(uuid())
  hubspotId String            @unique
  name      String
  ownerId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  owner     User              @relation(fields: [ownerId], references: [id])
  versions  WorkflowVersion[]
  monitoredBy MonitoredWorkflow[]
}

model WorkflowVersion {
  id            String   @id @default(uuid())
  workflowId    String
  versionNumber Int
  snapshotType  String
  createdBy     String
  createdAt     DateTime @default(now())
  data          Json
  workflow      Workflow @relation(fields: [workflowId], references: [id])

  @@unique([workflowId, versionNumber])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  timestamp  DateTime @default(now())
  ipAddress  String?
  user       User?    @relation(fields: [userId], references: [id])
}

model Subscription {
  id              String    @id @default(uuid())
  userId          String    @unique
  planId          String
  status          String
  trialEndDate    DateTime?
  nextBillingDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Webhook {
  id          String   @id @default(uuid())
  userId      String
  name        String?
  endpointUrl String
  secret      String?
  events      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Plan {
  id           String   @id
  name         String
  maxWorkflows Int?
  historyDays  Int?
  features     String[]
}

model Overage {
  id          String   @id @default(uuid())
  userId      String
  type        String
  amount      Int
  periodStart DateTime
  periodEnd   DateTime
  billed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, type, periodStart, periodEnd])
}

model NotificationSettings {
  id                        String   @id @default(uuid())
  userId                    String   @unique
  notificationsEnabled      Boolean  @default(true)
  notificationEmail         String
  workflowDeleted           Boolean  @default(true)
  enrollmentTriggerModified Boolean  @default(false)
  workflowRolledBack        Boolean  @default(true)
  criticalActionModified    Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  description String
  keyHash     String
  createdAt   DateTime  @default(now())
  lastUsed    DateTime?
  revoked     Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
}

model SsoConfig {
  id        String   @id @default(uuid())
  provider  String
  metadata  String
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonitoredWorkflow {
  id         String   @id @default(uuid())
  userId     String
  workflowId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  workflow   Workflow @relation(fields: [workflowId], references: [id])

  @@unique([userId, workflowId])
}
